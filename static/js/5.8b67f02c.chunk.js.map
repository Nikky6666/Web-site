{"version":3,"sources":["common/FormsControls/FormsControls.tsx","common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.module.css","assets/images/userWithoutPhoto.jpg","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["FormControl","meta","touched","error","children","hasError","className","s","formControl","messageError","Textarea","props","input","restProps","Input","createField","placeholder","name","validate","component","classForDiv","text","module","exports","required","value","Message","isDeleted","deletedMessages","find","m","id","oneMessage","cn","wrapper","notVuived","viewed","message","fromUser","ownerId","senderId","fromInterlocutor","deletedMessage","senderName","body","buttons","onClick","restoreMessage","deleteMessageForOwner","addMessageToSpam","DialogItem","path","user","undefined","dialogItem","to","activeClassName","active","dialog","src","photos","small","withoughtPhoto","alt","userName","hasNewMessages","newMessagesCount","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","style","width","test","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","key","messageElements","messages","MessagesComponent","containerMessages","buttonPrevMes","isVisible","currentDialogMessagesCount","length","dialogsItems","selectedDialogId","messageToSelectDialog","render","newMessageBody","sendMessage","userId","mapStateToPropsForRedirect","isAuth","auth","DialogsContainer","this","init","prevProps","prevStateoobje","updateDialog","setCurrentDialog","React","Component","mapDispatchToProps","getMessagesNewerThenLast","dialogsReducerActionCreators","compose","connect","WrappedComponent"],"mappings":"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","file":"static/js/5.8b67f02c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport s from \"./FormsControls.module.css\"\r\nimport {Field, WrappedFieldInputProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../utils/validators/validators\";\r\n\r\n\r\n\r\nexport const FormControl: React.FC<WrappedFieldProps> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return <div className={`${s.formControl} ${(hasError ? s.error : \"\")}`}>\r\n        {children}\r\n        {hasError && <div className={s.messageError}>\r\n            {error}\r\n        </div>}\r\n    </div>\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n};\r\n\r\nexport function createField <FormKeysType extends string>  (\r\n    placeholder: string | undefined,\r\n    name: FormKeysType,\r\n    validate: Array<FieldValidatorType>,\r\n    component: string | React.FC<WrappedFieldProps>,\r\n    classForDiv?: string | undefined,\r\n    props = {},\r\n    text = \"\" as string | null\r\n){\r\n    return (\r\n        <div className={classForDiv}>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validate}\r\n                component={component}\r\n                {...props}/>\r\n            {text}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport type GetStringKeys<T> = keyof T;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__qznE0\",\"error\":\"FormsControls_error__12xW8\",\"messageError\":\"FormsControls_messageError__2MdfD\",\"formSummaryError\":\"FormsControls_formSummaryError__3eMoq\"};","export type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"field is required\"\r\n};\r\n\r\n\r\nexport const maxLengthCreator = (length: number): FieldValidatorType => (value) =>{\r\n    if(value && value.length >= length) return `Max length is ${length} symbols`;\r\n    return undefined;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1wqCN\",\"messageToSelectDialog\":\"Dialogs_messageToSelectDialog__1eed-\",\"dialogsItems\":\"Dialogs_dialogsItems__KQfTT\",\"dialog\":\"Dialogs_dialog__3hKH2\",\"dialogItem\":\"Dialogs_dialogItem__3mA13\",\"active\":\"Dialogs_active__mJiFu\",\"messages\":\"Dialogs_messages__1qvhp\",\"newMessagesCount\":\"Dialogs_newMessagesCount__29kXF\",\"buttonPrevMes\":\"Dialogs_buttonPrevMes__1qjJd\",\"text\":\"Dialogs_text__3Teea index_commonTextarea__hGuhA\",\"test\":\"Dialogs_test__2hiSJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__HRh8y\",\"senderName\":\"Message_senderName__2jTwM\",\"buttons\":\"Message_buttons__33x_U\",\"deletedMessage\":\"Message_deletedMessage__2zYWv\",\"wrapper\":\"Message_wrapper__6jx1v\",\"fromUser\":\"Message_fromUser__23vno\",\"fromInterlocutor\":\"Message_fromInterlocutor__2Z6qU\",\"notVuived\":\"Message_notVuived__1d9N9\"};","module.exports = __webpack_public_path__ + \"static/media/userWithoutPhoto.9bd7cc8a.jpg\";","import React from 'react'\r\nimport s from './Message.module.css'\r\nimport cn from 'classnames'\r\nimport {DeletedDialogMessageType, DialogMessage} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    oneMessage: DialogMessage\r\n    ownerId: number\r\n    deletedMessages: Array<DeletedDialogMessageType>\r\n    deleteMessageForOwner: (id: string) => void\r\n    restoreMessage: (id: string) => void\r\n    addMessageToSpam: (id: string) => void\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n\r\n    const isDeleted = !!props.deletedMessages.find(m => m.id ===props.oneMessage.id);\r\n\r\n    const deleteMessage = () => {\r\n        props.deleteMessageForOwner(props.oneMessage.id);\r\n    };\r\n    const restoreMessage = () => {\r\n        props.restoreMessage(props.oneMessage.id);\r\n    };\r\n\r\n    return (<div className={cn(s.wrapper, {[s.notVuived]: !props.oneMessage.viewed})}>\r\n            <div className={cn(s.message,\r\n                {\r\n                    [s.fromUser]: props.ownerId===props.oneMessage.senderId,\r\n                    [s.fromInterlocutor]: props.ownerId!==props.oneMessage.senderId,\r\n                    [s.deletedMessage] : isDeleted\r\n                }\r\n                )}>\r\n                <div className={s.senderName}>{props.oneMessage.senderName}: </div>\r\n                {!isDeleted ? props.oneMessage.body : \"message is deleted\"}\r\n                <div className={s.buttons}>\r\n                 <span onClick={!isDeleted ? deleteMessage : restoreMessage}>{!isDeleted ? \"delete for me\":\"restore\"}</span> | <span  onClick={()=>{props.addMessageToSpam(props.oneMessage.id)}}>spam</span>\r\n            </div>\r\n            </div>\r\n        </div>\r\n     )\r\n};\r\n\r\nexport default Message;\r\n\r\n","import React from 'react'\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport withoughtPhoto from '../../../assets/images/userWithoutPhoto.jpg'\r\nimport {DialogType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    user: DialogType\r\n\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.user.id;\r\n    if(props.user.id!==undefined) return (\r\n        <div className={s.dialogItem}>\r\n            <NavLink to={path} activeClassName={s.active} className={s.dialog}>\r\n                <div>\r\n                    <img\r\n                        src={!!props.user.photos.small ? props.user.photos.small : withoughtPhoto}\r\n                        alt=\"ave\"/>\r\n                </div>\r\n                <div>{props.user.userName}</div>\r\n                {props.user.hasNewMessages&&<div className={s.newMessagesCount}>{props.user.newMessagesCount}</div>}\r\n            </NavLink>\r\n        </div>);\r\n        else return <div className={s.dialogItem}>not found</div>\r\n};\r\n\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Textarea} from \"../../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport s from \"../Dialogs.module.css\";\r\nimport {BigButton} from \"../../common/Buttons/Buttons\";\r\nimport {AddMessageFormValuesType} from \"../Dialogs\";\r\n\r\n\r\n//const maxLength50 = maxLengthCreator(50);\r\n\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return <form onSubmit={props.handleSubmit} style={{width: '100%'}}>\r\n        {createField<keyof AddMessageFormValuesType>(\r\n            'Ваше сообщение',\r\n            'newMessageBody',\r\n            [required],\r\n            Textarea,\r\n            s.test,\r\n            {},\r\n            ''\r\n        )}\r\n        <div>\r\n            <BigButton name=\"SEND\"/>\r\n        </div>\r\n    </form>\r\n};\r\n\r\n const AddMessageReduxForm = reduxForm<AddMessageFormValuesType>({form: 'dialogAddMessageForm'})(AddMessageForm);\r\n\r\n export default AddMessageReduxForm","import React from 'react'\r\nimport s from './Dialogs.module.css'\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport {PagesButton} from \"../common/Buttons/Buttons\";\r\nimport {Route} from \"react-router-dom\";\r\nimport {DialogsInitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {DialogMessage} from \"../../types/types\";\r\nimport AddMessageReduxForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\ntype OwnPropsType = {\r\n    dialogsPage: DialogsInitialStateType,\r\n    sendMessage: (id: string, message: string) => void,\r\n    addMessageToSpam: (id: string) => void,\r\n    restoreMessage: (id: string) => void,\r\n    deleteMessageForOwner: (id: string) => void,\r\n    ownerId: number,\r\n    userId: string,\r\n    oneMessage: DialogMessage,\r\n    currentDialogMessagesCount: number,\r\n}\r\n\r\nconst Dialogs: React.FC<OwnPropsType> = (props) => {\r\n    let state = props.dialogsPage;\r\n    let dialogsElements = state.dialogs.map(user => <DialogItem key={user.id} user={user}/>);\r\n    let messageElements = state.messages.map(oneMessage => (\r\n        <Message\r\n            addMessageToSpam={props.addMessageToSpam}\r\n            restoreMessage={props.restoreMessage}\r\n            deletedMessages={state.deletedMessages}\r\n            deleteMessageForOwner={props.deleteMessageForOwner}\r\n            ownerId={props.ownerId}\r\n            key={oneMessage.id}\r\n            oneMessage={oneMessage}/>\r\n            ));\r\n\r\n    const MessagesComponent = () => <div className={s.containerMessages}>\r\n        <div className={s.buttonPrevMes}>\r\n            <PagesButton isVisible={props.currentDialogMessagesCount > state.messages.length}\r\n                         name=\"show prev messages\"/>\r\n        </div>\r\n        {messageElements}\r\n    </div>;\r\n\r\n    const addNewMessage = (value: any) => {\r\n        if (value.newMessageBody) props.sendMessage(props.userId, value.newMessageBody);\r\n    };\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {state.selectedDialogId===null && <div className={s.messageToSelectDialog}>Please select dialog</div>}\r\n                {state.selectedDialogId!==null && <Route\r\n                    path={`/dialogs/${state.selectedDialogId}`} render={()=><MessagesComponent/>}/>}\r\n            </div>\r\n            {state.selectedDialogId!==null && <AddMessageReduxForm onSubmit={addNewMessage}/>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Dialogs;\r\n\r\n\r\nexport type AddMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\n","import React from 'react'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\ntype DispatchPropsType = {\r\n   //fake: () => void\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>){\r\n    function RedirectComponent(props: MapPropsType & DispatchPropsType) {\r\n        if (!props.isAuth) return <Redirect to=\"/login\"/>;\r\n        let {isAuth, ...restProps} = props;\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    return connect<\r\n        MapPropsType, DispatchPropsType, WCP, AppStateType\r\n        >(mapStateToPropsForRedirect)(RedirectComponent);\r\n}","import {\r\n    addMessageToSpam,\r\n    deleteMessageForOwner,\r\n    getMessagesNewerThenLast,\r\n    init,\r\n    restoreMessage,\r\n    sendMessage,\r\n    dialogsReducerActionCreators,\r\n    updateDialog, DialogsInitialStateType\r\n} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {DialogMessage} from \"../../types/types\";\r\n\r\ntype OwnPropsType = {\r\n    init: (id: string) => void,\r\n    userId: string,\r\n    updateDialog: (id: string) => void,\r\n    setCurrentDialog: (data: string | null) => void,\r\n    dialogsPage: DialogsInitialStateType,\r\n    sendMessage: (id: string, message: string) => void,\r\n    addMessageToSpam: (id: string) => void,\r\n    restoreMessage: (id: string) => void,\r\n    deleteMessageForOwner: (id: string) => void,\r\n    ownerId: number,\r\n    oneMessage: DialogMessage,\r\n    currentDialogMessagesCount: number,\r\n    newMessagessCount: number | string,\r\n}\r\n\r\nclass DialogsContainer extends React.Component<OwnPropsType> {\r\n    componentDidMount() {\r\n        this.props.init(this.props.userId);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: any, prevStateoobje: any) {\r\n        if (prevProps.userId != this.props.userId) {\r\n            this.props.updateDialog(this.props.userId);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.setCurrentDialog(null);\r\n    }\r\n\r\n    render() {\r\n        return <Dialogs {...this.props} />\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        ownerId: state.auth.userId,\r\n        currentDialogMessagesCount: state.dialogsPage.currentDialogMessagesCount\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    init,\r\n    updateDialog,\r\n    sendMessage,\r\n    getMessagesNewerThenLast,\r\n    setCurrentDialog: dialogsReducerActionCreators.setCurrentDialog,\r\n    deleteMessageForOwner,\r\n    restoreMessage,\r\n    addMessageToSpam\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(DialogsContainer);\r\n\r\n"],"sourceRoot":""}