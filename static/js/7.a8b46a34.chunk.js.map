{"version":3,"sources":["common/FormsControls/FormsControls.tsx","common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","components/Login/Login.module.css","components/Login/Login.tsx"],"names":["FormControl","meta","touched","error","children","hasError","className","s","formControl","messageError","Textarea","props","input","restProps","Input","createField","placeholder","name","validate","component","classForDiv","text","module","exports","required","value","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","loginForm","undefined","type","rememberMe","checkbox","captchaUrl","src","alt","sform","formSummaryError","connect","state","isAuth","auth","login","to","container","formData","email","password","captcha"],"mappings":"4RAOaA,EAA2C,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SACxEC,EAAWH,GAAWC,EAC5B,OAAO,yBAAKG,UAAS,UAAKC,IAAEC,YAAP,YAAuBH,EAAWE,IAAEJ,MAAQ,KAC5DC,EACAC,GAAY,yBAAKC,UAAWC,IAAEE,cAC1BN,KAKAO,EAAwC,SAACC,GAAW,IACtDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBV,KAD8C,YACxBU,EADwB,mBAE5D,OAAO,kBAACX,EAAgBW,EAAO,8CAAcC,EAAWC,MAG/CC,EAAqC,SAACH,GAAW,IACnDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBV,KAD2C,YACrBU,EADqB,mBAEzD,OAAO,kBAACX,EAAgBW,EAAO,2CAAWC,EAAWC,MAGlD,SAASE,EACZC,EACAC,EACAC,EACAC,EACAC,GAGF,IAFET,EAEH,uDAFW,GACRU,EACH,uDADU,GAEP,OACI,yBAAKf,UAAWc,GACZ,kBAAC,IAAD,eACIJ,YAAaA,EACbC,KAAMA,EACNC,SAAUA,EACVC,UAAWA,GACPR,IACPU,K,oBC3CbC,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,aAAe,oCAAoC,iBAAmB,0C,iCCC9K,kCAAO,IAAMC,EAA+B,SAACC,GACzC,IAAIA,EACJ,MAAO,sB,oBCHXH,EAAOC,QAAU,CAAC,UAAY,yBAAyB,UAAY,yBAAyB,MAAQ,8CAA8C,SAAW,wBAAwB,WAAa,4B,iCCDlM,yHAgCMG,EAAiBC,YAAkD,CAACC,KAAM,SAAzDD,EAfoF,SAAChB,GACxG,OAAM,0BAAMkB,SAAUlB,EAAMmB,aAAcxB,UAAWC,IAAEwB,WAClDhB,YAAqC,QAAQ,QAAS,CAACS,KAAUV,SAAMkB,EAAU,CAAC1B,UAAWC,IAAEK,OAAO,MACtGG,YAAqC,cAAc,WAAW,CAACS,KAAUV,SAAMkB,EAAU,CAAC1B,UAAWC,IAAEK,MAAOqB,KAAM,YAAY,MAChIlB,iBAAqCiB,EAAU,aAAa,GAAI,QAC7DzB,IAAE2B,WAAW,CAACD,KAAM,WAAY3B,UAAWC,IAAE4B,UAAU,eAC1DxB,EAAMyB,YAAc,6BACjB,yBAAKC,IAAK1B,EAAMyB,WAAYE,IAAI,YAC/BvB,YAAqC,SAAS,UAAU,CAACS,KAAUV,SAAMkB,EAAU,CAAC1B,UAAWC,IAAEK,OAAO,OAE5GD,EAAMR,OAAS,yBAAKG,UAAWiC,IAAMC,kBAAmB7B,EAAMR,OAC/D,kBAAC,IAAD,CAAWc,KAAK,eAwCTwB,uBALS,SAACC,GAAD,MAA4C,CAChEC,OAAQD,EAAME,KAAKD,OACnBP,WAAYM,EAAME,KAAKR,cAGc,CAACS,WAA3BJ,EAhBmD,SAAC9B,GAK/D,OAAGA,EAAMgC,OAAe,kBAAC,IAAD,CAAUG,GAAI,aAChC,yBAAKxC,UAAWC,IAAEwC,WACpB,qCACA,kBAACrB,EAAD,CAAgBU,WAAYzB,EAAMyB,WAAYP,SAPjC,SAACmB,GAAmC,IAC1CC,EAAwCD,EAAxCC,MAAOC,EAAiCF,EAAjCE,SAAUhB,EAAuBc,EAAvBd,WAAYiB,EAAWH,EAAXG,QACpCxC,EAAMkC,MAAMI,EAAOC,EAAUhB,EAAYiB","file":"static/js/7.a8b46a34.chunk.js","sourcesContent":["import React from \"react\";\r\nimport s from \"./FormsControls.module.css\"\r\nimport {Field, WrappedFieldInputProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../utils/validators/validators\";\r\n\r\n\r\n\r\nexport const FormControl: React.FC<WrappedFieldProps> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return <div className={`${s.formControl} ${(hasError ? s.error : \"\")}`}>\r\n        {children}\r\n        {hasError && <div className={s.messageError}>\r\n            {error}\r\n        </div>}\r\n    </div>\r\n};\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n};\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n};\r\n\r\nexport function createField <FormKeysType extends string>  (\r\n    placeholder: string | undefined,\r\n    name: FormKeysType,\r\n    validate: Array<FieldValidatorType>,\r\n    component: string | React.FC<WrappedFieldProps>,\r\n    classForDiv?: string | undefined,\r\n    props = {},\r\n    text = \"\" as string | null\r\n){\r\n    return (\r\n        <div className={classForDiv}>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validate}\r\n                component={component}\r\n                {...props}/>\r\n            {text}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport type GetStringKeys<T> = keyof T;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__qznE0\",\"error\":\"FormsControls_error__12xW8\",\"messageError\":\"FormsControls_messageError__2MdfD\",\"formSummaryError\":\"FormsControls_formSummaryError__3eMoq\"};","export type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"field is required\"\r\n};\r\n\r\n\r\nexport const maxLengthCreator = (length: number): FieldValidatorType => (value) =>{\r\n    if(value && value.length >= length) return `Max length is ${length} symbols`;\r\n    return undefined;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__Nrjgl\",\"loginForm\":\"Login_loginForm__j4cYo\",\"input\":\"Login_input__J8lpp index_commonInput__2sKOg\",\"checkbox\":\"Login_checkbox__2VjFf\",\"rememberMe\":\"Login_rememberMe__1suFe\"};","import React from 'react';\r\nimport s from './Login.module.css'\r\nimport sform from '../../common/FormsControls/FormsControls.module.css'\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {BigButton} from \"../common/Buttons/Buttons\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = (props) => {\r\n    return<form onSubmit={props.handleSubmit} className={s.loginForm}>\r\n        {createField<LoginFormValuesKeysType>(\"Email\",\"email\", [required],Input,undefined,{className: s.input},null)}\r\n        {createField<LoginFormValuesKeysType>(\"Password...\",\"password\",[required],Input,undefined,{className: s.input, type: \"password\"},null)}\r\n        {createField<LoginFormValuesKeysType>(undefined,\"rememberMe\",[] ,\"input\",\r\n            s.rememberMe,{type: \"checkbox\", className: s.checkbox},\"remember me\")}\r\n        {props.captchaUrl && <div>\r\n            <img src={props.captchaUrl} alt=\"captcha\"/>\r\n            {createField<LoginFormValuesKeysType>(\"Key...\",\"captcha\",[required],Input,undefined,{className: s.input},null)}\r\n        </div>}\r\n        {props.error && <div className={sform.formSummaryError}>{props.error}</div>}\r\n        <BigButton name=\"Submit\"/>\r\n    </form>\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);\r\n\r\ntype MapStatePropsType = {\r\n    captchaUrl: string | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\ntype LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\ntype LoginFormValuesKeysType = keyof LoginFormValuesType;\r\n\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        const {email, password, rememberMe, captcha} = formData;\r\n        props.login(email, password, rememberMe, captcha);\r\n    };\r\n    if(props.isAuth) return <Redirect to={\"/profile\"} />;\r\n    return<div className={s.container}>\r\n        <h1>LOGIN</h1>\r\n        <LoginReduxForm captchaUrl={props.captchaUrl} onSubmit={onSubmit}/>\r\n    </div>\r\n};\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType =>({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl,\r\n});\r\n\r\nexport default connect( mapStateToProps, {login})(Login);"],"sourceRoot":""}