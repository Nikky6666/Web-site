{"version":3,"sources":["serviceWorker.js","components/Navbar/Friends/Friends.tsx","components/Navbar/Friends/FriendsContainer.tsx","components/Navbar/Navbar.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/NotFound/NotFound.tsx","ErrorBoundary/ErrorBoundary.jsx","components/tests/TestPage.jsx","hoc/withSuspense.tsx","App.tsx","index.js","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/common/Buttons/Buttons.module.css","components/Navbar/Navbar.module.css","components/Navbar/Friends/Friends.module.css","api/api.ts","api/dialogs-api.ts","redux/dialogs-reducer.ts","components/common/Buttons/Buttons.tsx","common/Preloader/Preloader.tsx","components/Header/Header.module.css","components/NotFound/NotFound.module.css","api/profile-api.ts","redux/profile-reducer.ts","utils/object-helpers.ts","api/users-api.ts","redux/users-reducer.ts","assets/images/preloader.svg","assets/images/logoSite.png","assets/images/404NotFound.jpg","assets/images/oopsPhoto.jpg","ErrorBoundary/ErrorBoundary.module.css"],"names":["Boolean","window","location","hostname","match","Friend","props","className","s","friend","src","img","alt","name","Friends","friendsElements","friends","map","key","container","header","FriendsContainer","connect","state","sidebar","linksArr","to","isNeedCount","Navbar","nav","el","i","activeClassName","activeLink","item","newMessagesCount","initialState","initialized","globalError","appReducerActionCreators","initializedSuccess","type","setGlobalError","errorMessage","appReducer","action","id","sidebarReducer","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","dialogsReducer","usersPage","usersReducer","auth","authReducer","form","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Header","logo","loginBlock","isAuth","login","callback","logout","history","push","HeaderContainer","this","getAuthUserData","React","Component","withRouter","NotFound","notFoundPhoto","ErrorBoundary","hasError","oopsPhoto","children","TestPage","test","withSuspense","WrappedComponent","Suspense","fallback","Settings","lazy","Musik","News","DialogsContainer","UsersContainer","ProfileContainer","Login","SuspensedDialogs","SuspensedProfile","App","catchAllUnhandledErrors","e","reason","showGlobalError","toJSON","message","intervalId","initializeApp","getNewMessages","addEventListener","setInterval","clearInterval","removeEventListener","exact","path","render","Preloader","newMessagessCount","userId","params","pageTitle","AppContainer","dispatch","setTimeout","SamuraiJSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","authAPI","instance","get","response","data","email","password","rememberMe","captcha","post","delete","securityAPI","res","captchaUrl","a","meData","resultCode","authReducerActionCreators","setUserData","ResultCodesEnum","Success","ResultCodeForCaptcha","CaptchaIsRequired","getCaptchaUrl","messages","length","stopSubmit","_error","url","getCaptchaUrlSucces","payload","module","exports","axios","create","withCredentials","baseURL","headers","dialogsAPI","put","items","totalCount","body","date","messageId","dialogs","selectedDialogId","needRefresh","currentDialogMessagesCount","deletedMessages","getDialogs","dialogsReducerActionCreators","getDialogsSuccess","sendMessage","setNeedRefresh","putUpDialog","startDialog","getState","dialog","find","d","getMessages","viewed","getMessagesNewerThenLast","addedAt","result","some","m","getMessagesSuccess","setHasNewMessages","init","setCurrentDialog","updateDialog","count","setNewMessagesCount","Number","deleteMessageForOwner","restoredInterval","deleteMessageForOwnerSuccess","addDeletedMessages","appendMessages","restoreMessage","interval","restoreMessageSuccess","addMessageToSpam","addToSpamSuccess","filter","hasNewMessages","BigButton","onClick","button","SmallButton","disabled","cn","smallButton","PagesButton","pagesButton","notVisible","isVisible","AddFileButton","addFileButton","htmlFor","onChange","preloader","profileAPI","status","photoFile","formData","FormData","append","profile","postsData","likesCount","newPostText","getUserProfile","profileReducerActionCreators","setUserProfile","getStatus","setStatus","updateStatus","savePhoto","file","sevePhotoSuccess","photos","saveProfile","Error","split","toLocaleLowerCase","slice","Promise","reject","newPost","toString","postId","p","addPost","deletePost","updatePost","updateObjectInArray","itemId","objPropName","newObjProp","userAPI","getUsers","currentPage","pageSize","follow","unfollow","users","totalUsersCount","isFetching","followingInProgress","requestUsers","followed","page","usersReducerActionCreators","toggleIsFetching","setUsers","setCurrentPage","setTotalUsersCount","_followUnfollowFlow","apiMethod","actionCreator","toggleFollowingInProgress","bind","followSuccess","unfollowSuccess"],"mappings":"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","file":"static/js/main.9f022721.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport s from './Friends.module.css'\r\nimport {FriendSidebarType} from \"../../../types/types\";\r\n\r\ntype FriendPropsType = {\r\n    friend: FriendSidebarType\r\n}\r\n\r\nconst Friend: React.FC<FriendPropsType> = (props) => {\r\n  return (\r\n      <div className={s.friend}>\r\n          <img src={props.friend.img} alt=\"ava\"/>\r\n          <div>{props.friend.name}</div>\r\n      </div>\r\n  )\r\n};\r\n\r\n\r\ntype FriendsPropsType = {\r\n    friends: Array<FriendSidebarType>\r\n}\r\nconst Friends: React.FC<FriendsPropsType> = (props) => {\r\n\r\n    const friendsElements = props.friends.map(\r\n        friend => <Friend key={friend.name} friend={friend}/>\r\n    );\r\n\r\n    return (\r\n        <div className={s.container}>\r\n          <div className={s.header}>Friends</div>\r\n      <div className={s.friends}>\r\n          {friendsElements}\r\n      </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Friends;","\r\nimport {connect} from \"react-redux\";\r\nimport Friends from \"./Friends\";\r\nimport {FriendSidebarType} from \"../../../types/types\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\ntype MapStateProps = {\r\n    friends: Array<FriendSidebarType>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateProps => {\r\n    return {\r\n        friends: state.sidebar.friends\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = () => {\r\n    return {}\r\n};\r\n\r\nlet FriendsContainer = connect(mapStateToProps, mapDispatchToProps)(Friends);\r\n\r\nexport default FriendsContainer;","import React from 'react';\r\nimport s from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport FriendsContainer from \"./Friends/FriendsContainer\";\r\n\r\ntype PropsType = {\r\n    newMessagesCount: number\r\n}\r\n\r\nconst linksArr = [\r\n    {name: 'Profile', to: 'profile', isNeedCount: false},\r\n    {name: 'Messages', to: 'dialogs', isNeedCount: true},\r\n    {name: 'Users', to: 'users', isNeedCount: false},\r\n    {name: 'News', to: 'news', isNeedCount: false},\r\n    {name: 'Musik', to: 'musik', isNeedCount: false},\r\n    {name: 'Settings', to: 'settings', isNeedCount: false},\r\n    {name: 'Tests', to: 'test', isNeedCount: false},\r\n];\r\n\r\nconst Navbar = (props: PropsType) => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            {linksArr.map((el, i) => (\r\n                <NavLink key={i} to={`/${el.to}`}  activeClassName={s.activeLink}>\r\n                    <div className={s.item}>\r\n                        {el.name}\r\n                        {el.isNeedCount &&\r\n                        props.newMessagesCount>0 &&\r\n                        <div className={s.newMessagesCount}>{props.newMessagesCount}</div>\r\n                        }\r\n                    </div>\r\n                </NavLink>\r\n                )\r\n            )}\r\n            <FriendsContainer/>\r\n        </nav>\r\n    )\r\n};\r\n\r\nexport default Navbar;","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {ActionsTypes, AppStateType} from \"./redux-store\";\r\n\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    globalError: \"\",\r\n};\r\n\r\nconst appReducer = (state = initialState, action: AppReducerActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            };\r\n        case 'SET_GLOBAL_ERROR':\r\n            return {\r\n                ...state,\r\n                globalError: action.errorMessage\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, AppReducerActionsTypes>;\r\n\r\nexport const initializeApp = (): ThunkType => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise]).then(() => {\r\n        dispatch(appReducerActionCreators.initializedSuccess())\r\n    });\r\n};\r\n\r\nexport const setGlobalErrorOnTime = (errorMessage: string): ThunkType => (dispatch: any) => {\r\n    dispatch(appReducerActionCreators.setGlobalError(errorMessage));\r\n    setTimeout(() => {\r\n        dispatch(appReducerActionCreators.setGlobalError(\"\"));\r\n    }, 5000)\r\n};\r\n\r\n\r\nexport const appReducerActionCreators = {\r\n    initializedSuccess: () => ({type: 'INITIALIZED_SUCCESS'} as const),\r\n    setGlobalError: (errorMessage: string) => ({type: 'SET_GLOBAL_ERROR', errorMessage} as const),\r\n};\r\n\r\nexport default appReducer;\r\n\r\ntype AppReducerActionsTypes = ActionsTypes<typeof appReducerActionCreators>;\r\nexport type InitialStateType = typeof initialState;\r\n","import {ActionsTypes} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    friends: [\r\n        {\r\n            id: 1,\r\n            name: 'Jey',\r\n            img: 'https://yt3.ggpht.com/a/AGF-l78XZgyutXUlON-U4sTy-EwaZoBJXrqGvQ2kxg=s900-c-k-c0xffffffff-no-rj-mo'\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Kristin',\r\n            img: 'https://yt3.ggpht.com/a/AGF-l78XZgyutXUlON-U4sTy-EwaZoBJXrqGvQ2kxg=s900-c-k-c0xffffffff-no-rj-mo'\r\n        },\r\n        {\r\n            id: 3,\r\n            name: 'Mike',\r\n            img: 'https://yt3.ggpht.com/a/AGF-l78XZgyutXUlON-U4sTy-EwaZoBJXrqGvQ2kxg=s900-c-k-c0xffffffff-no-rj-mo'\r\n        },\r\n    ]\r\n};\r\n\r\nexport type SidebarInitialStateType = typeof initialState;\r\n\r\nconst sidebarReducer = (state = initialState, action: SidebarReducerActionsTypes): SidebarInitialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype SidebarReducerActionsTypes = ActionsTypes<typeof sidebarReducerActionCreactors>\r\n\r\nexport const sidebarReducerActionCreactors = {\r\n    test: () => ({type: 'test'}),\r\n};\r\n\r\nexport default sidebarReducer;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage : profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nexport type ActionsTypes<T> = T extends {[keys: string]: (...args: any[]) => infer U } ? U : typeof Object\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(rootReducer, composeEnhancers( applyMiddleware(thunkMiddleware)))\r\n// @ts-ignore\r\nwindow.store = store;\r\nexport default store;","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport {BigButton} from \"../common/Buttons/Buttons\";\r\nimport logo from '../../assets/images/logoSite.png'\r\nimport {RouteComponentProps} from \"react-router-dom\";\r\n\r\n\r\nexport type MapPropsType = {\r\n    login: null | string\r\n    isAuth: boolean\r\n}\r\nexport type DispatchPropsType = {\r\n    logout: ()=>void\r\n    getAuthUserData: () => void\r\n}\r\n\r\nconst Header: React.FC<MapPropsType & DispatchPropsType & RouteComponentProps> = (props) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img\r\n                src={logo}\r\n                alt=\"\"/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth ? <div>{props.login} <BigButton name=\"Logout\" callback={props.logout}/></div> :\r\n                    <BigButton callback={()=>{props.history.push(\"/login\")}} name=\"Sign In\"/>}\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header, {DispatchPropsType, MapPropsType} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuthUserData, logout} from \"../../redux/auth-reducer\";\r\nimport {compose} from \"redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nclass HeaderContainer extends React.Component<MapPropsType & DispatchPropsType & RouteComponentProps>{\r\n\r\n    componentDidMount() {\r\n        this.props.getAuthUserData();\r\n    }\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    login: state.auth.login,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {getAuthUserData, logout}))(HeaderContainer);","import React from 'react';\r\nimport notFoundPhoto from '../../assets/images/404NotFound.jpg'\r\nimport s from './NotFound.module.css'\r\n\r\nconst NotFound: React.FC = () =>{\r\n    return <div className={s.container}><img className={s.img} src={notFoundPhoto} alt=\"404 not found\" /></div>\r\n};\r\n\r\nexport default NotFound;","import React from 'react'\r\nimport oopsPhoto from '../assets/images/oopsPhoto.jpg'\r\nimport s from './ErrorBoundary.module.css'\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    state = {\r\n        hasError: false,\r\n    };\r\n    static getDerivedStateFromError() {\r\n        return {hasError: true};\r\n    }\r\n    // componentDidCatch(error, errorInfo) {\r\n    //     debugger;\r\n    //     this.setState({hasError: true})\r\n    // }\r\n    render() {\r\n        if (this.state.hasError) {\r\n         return <div className={s.container}><img src={oopsPhoto} alt=\"\"/><h1>Sorry, some error</h1></div>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from \"react\";\r\n\r\nclass TestPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            test: false,\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>TEST</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TestPage;","import React from \"react\";\r\n\r\nexport function withSuspense<WSP>(WrappedComponent: React.ComponentType) {\r\n    return (props: WSP) => {\r\n     return <React.Suspense fallback={<div>Loading...</div>}>\r\n         <WrappedComponent {...props} />\r\n     </React.Suspense>\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport {BrowserRouter, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\nimport {connect, Provider} from \"react-redux\";\nimport {appReducerActionCreators, setGlobalErrorOnTime} from \"./redux/app-reducer\";\nimport Preloader from \"./common/Preloader/Preloader\";\nimport {compose} from \"redux\";\nimport store, {AppStateType} from \"./redux/redux-store\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport NotFound from \"./components/NotFound/NotFound\";\nimport ErrorBoundary from \"./ErrorBoundary/ErrorBoundary\";\nimport {getNewMessages} from \"./redux/dialogs-reducer\";\nimport TestPage from \"./components/tests/TestPage\";\nimport {withSuspense} from \"./hoc/withSuspense\";\n\nconst Settings = React.lazy(() => import('./components/Settings/Settings'));\nconst Musik = React.lazy(() => import('./components/Musik/Musik'));\nconst News = React.lazy(() => import('./components/News/News'));\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst UsersContainer = React.lazy(() => import('./components/Users/UsersContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\nconst Login = React.lazy(() => import('./components/Login/Login'));\n\nconst SuspensedDialogs = withSuspense(DialogsContainer);\nconst SuspensedProfile = withSuspense(ProfileContainer)\n\n\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) =>{\n        if(e.reason) {\n            this.props.showGlobalError(e.reason.toJSON().message);\n        }\n    };\n\n    componentDidMount() {\n        this.props.initializeApp();\n        this.props.getNewMessages();\n\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    };\n    intervalId=null as any;\n    componentDidUpdate() {\n        if(this.props.isAuth && this.intervalId===null){\n            this.intervalId = setInterval(()=>{\n                this.props.getNewMessages();\n            }, 4000);\n        }\n        if(!this.props.isAuth){\n            clearInterval(this.intervalId);\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n        clearInterval(this.intervalId);\n    }\n    render() {\n        if (!this.props.initialized) return <div className=\"preloader\"><Preloader/></div>;\n        return (\n            <ErrorBoundary>\n                <div className='app-wrapper'>\n                    <HeaderContainer/>\n                    <Navbar newMessagesCount={this.props.newMessagesCount}/>\n                    <div className='app-wrapper-content'>\n                        {this.props.globalError && <div className=\"globalError\"><h1>{this.props.globalError}</h1></div>}\n                        <Switch>\n                            <Route exact path=\"/\" render={() => <Redirect to=\"/profile\"/>}/>\n                            <React.Suspense fallback={<Preloader/>}>\n                                <Route path=\"/dialogs/:userId?\"\n                                       render={(props) => <SuspensedDialogs\n                                           // @ts-ignore\n                                           newMessagessCount={this.props.newMessagesCount}\n                                           userId={props.match.params.userId}/>\n                                       }\n                                />\n                                <Route path=\"/profile/:userId?\" render={() => <SuspensedProfile/>}/>\n                                <Route path=\"/users\" render={() => <UsersContainer pageTitle={'Samurai'}/>}/>\n                                <Route path=\"/news\" render={() => <News/>}/>\n                                <Route path=\"/musik\" render={() => <Musik/>}/>\n                                <Route path=\"/settings\" render={() => <Settings/>}/>\n                                <Route path=\"/login\" render={() => <Login/>}/>\n                                <Route path=\"/test\" render={()=><TestPage />} />\n                            </React.Suspense>\n                            <Route path=\"*\" render={() => <NotFound/>}/>\n                        </Switch>\n                    </div>\n                </div>\n            </ErrorBoundary>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized,\n    globalError: state.app.globalError,\n    isAuth: state.auth.isAuth,\n    newMessagesCount: state.dialogsPage.newMessagesCount\n});\n\ntype DispatchPropsType = {\n    initializeApp: () => void\n    showGlobalError: (message: string) => void,\n    getNewMessages: () => void\n}\ntype MapPropsType = ReturnType<typeof mapStateToProps>\n\nconst AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {\n        initializeApp: appReducerActionCreators.initializedSuccess,\n        showGlobalError: setGlobalErrorOnTime,\n        getNewMessages\n    }))(App);\n\nconst SamuraiJSApp = () => {\n    return <BrowserRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n};\n\nexport default SamuraiJSApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport SamuraiJSApp from \"./App\";\n\n\n    ReactDOM.render( <SamuraiJSApp/>,document.getElementById('root') );\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {instance, ResponseType, ResultCodeForCaptcha, ResultCodesEnum} from \"./api\";\r\n\r\ntype MeResponseType = {\r\n        id: number,\r\n        email: string,\r\n        login: string,\r\n};\r\ntype LoginResponseType = {\r\n        userId: number\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<MeResponseType>>(\"auth/me\")\r\n            .then(response => response.data);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean, captcha: null | string = null) {\r\n        return instance.post<ResponseType<LoginResponseType, ResultCodeForCaptcha | ResultCodesEnum>>(\"auth/login\", {email, password, rememberMe, captcha})\r\n            .then(response => response.data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(\"auth/login\").then(response => response.data);\r\n    },\r\n};","import {instance} from \"./api\";\r\n\r\ntype GetCaptchaURLResponseType = {\r\n    url: string\r\n}\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.delete<GetCaptchaURLResponseType>(\"security/get-captcha-url\")\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n};","import {ResultCodeForCaptcha, ResultCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\"\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {ActionsTypes, AppStateType, BaseThunkType} from \"./redux-store\";\r\nimport {authAPI} from \"../api/auth-api\";\r\nimport {securityAPI} from \"../api/security-api\";\r\nimport {Action} from \"redux\";\r\n\r\nlet initialState = {\r\n    userId: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null,\r\n};\r\n\r\n\r\n\r\nconst authReducer = (state = initialState, action: AuthReducerActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_USER_DATA':\r\n        case 'GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nexport const getAuthUserData = ():ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me();\r\n    if (meData.resultCode === 0) {\r\n        const {id, login, email} = meData.data;\r\n        dispatch(authReducerActionCreators.setUserData(id, login, email, true));\r\n    }\r\n};\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n     let data = await authAPI.login(email, password, rememberMe, captcha);\r\n         if(data.resultCode === ResultCodesEnum.Success) {\r\n             dispatch(getAuthUserData())\r\n         } else {\r\n             if(data.resultCode === ResultCodeForCaptcha.CaptchaIsRequired)  dispatch(getCaptchaUrl());\r\n             let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n             dispatch(stopSubmit(\"login\", {_error: message}));\r\n         }\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.logout();\r\n         if(data.resultCode === ResultCodesEnum.Success) {\r\n             dispatch(authReducerActionCreators.setUserData(null, null, null, false))\r\n         }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const response = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = response.url;\r\n    dispatch(authReducerActionCreators.getCaptchaUrlSucces(captchaUrl));\r\n};\r\n\r\nexport const authReducerActionCreators = {\r\n    setUserData: (userId: number | null, login: string | null, email: string | null, isAuth: boolean) => (\r\n        {\r\n            type: 'SET_USER_DATA',\r\n            payload: {userId, login, email, isAuth}}\r\n    ),\r\n    getCaptchaUrlSucces: (captchaUrl: string) => ({type: 'GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}})\r\n};\r\n\r\nexport default authReducer;\r\n\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype AuthReducerActionsTypes = ActionsTypes<typeof authReducerActionCreators>;\r\ntype ThunkType = BaseThunkType<AuthReducerActionsTypes | FormAction>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Buttons_button__86hft\",\"smallButton\":\"Buttons_smallButton__2nO7n\",\"container\":\"Buttons_container__3eZT8\",\"disabled\":\"Buttons_disabled__3k8El\",\"pagesButton\":\"Buttons_pagesButton__36zMX\",\"notVisible\":\"Buttons_notVisible__3XW5d\",\"addFileButton\":\"Buttons_addFileButton__1s1YJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1zXXq\",\"item\":\"Navbar_item__1djY0\",\"activeLink\":\"Navbar_activeLink__2fLZL\",\"newMessagesCount\":\"Navbar_newMessagesCount__3uYPw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"Friends_friend__atghj\",\"friends\":\"Friends_friends__28-tI\",\"header\":\"Friends_header__3wS9w\",\"container\":\"Friends_container__1Uf5Y\"};","import axios from \"axios\";\r\n\r\nexport type CommonResponseType = {\r\n    data: {}\r\n    messages: Array<string>\r\n    resultCode: number\r\n}\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': '0a4552fd-fc88-4874-a12b-39f74cc52685'\r\n    }\r\n});\r\n\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10,\r\n}\r\n\r\n\r\nexport type ResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    resultCode: RC\r\n    messages: Array<string>\r\n}","import {DialogMessage, DialogType} from \"../types/types\";\r\nimport {CommonResponseType, instance} from \"./api\";\r\n\r\ntype GetMessagesResponseType = {\r\n    error: null | string\r\n    items: Array<DialogMessage>\r\n    totalCount: number\r\n}\r\nexport const dialogsAPI = {\r\n    getDialogs() {\r\n        return instance.get<Array<DialogType>>(\"dialogs\").then(res => res.data)\r\n    },\r\n    startDialog(userId: number) {\r\n        return instance.put<CommonResponseType>(`dialogs/${userId}`).then(res => res.data)\r\n    },\r\n    getMessages(userId: number) {\r\n        return instance.get<GetMessagesResponseType>(`dialogs/${userId}/messages`).then(res => {\r\n                return {\r\n                    messages: res.data.items,\r\n                    totalCount: res.data.totalCount\r\n                }\r\n            }\r\n        )\r\n    },\r\n    sendMessage(userId: number, body: string) {\r\n        return instance.post<CommonResponseType>(`dialogs/${userId}/messages`, {body}).then(res => res.data)\r\n    },\r\n    getNewMessagesCount() {\r\n        return instance.get<number>('dialogs/messages/new/count')\r\n            .then(res => res.data);\r\n    },\r\n    getMessagesNewerThenLast(userId: number, date: string) {\r\n        return instance.get<Array<DialogMessage>>(`dialogs/${userId}/messages/new?newerThen=${date}`)\r\n            .then(res => res.data);\r\n    },\r\n    /*\r\n    checkOnViewed(messageId: string) {\r\n        return instance.get(`dialogs/messages/${messageId}/viewed`).then(res => res.data);\r\n    },*/\r\n    deleteMessageForOwner(messageId: string) {\r\n        return instance.delete<CommonResponseType>(`dialogs/messages/${messageId}`)\r\n            .then(res => res.data);\r\n    },\r\n    restoreMessage(messageId: string) {\r\n        return instance.put<CommonResponseType>(`dialogs/messages/${messageId}/restore`)\r\n            .then(res => res.data);\r\n    },\r\n    addToSpam(messageId: string) {\r\n        return instance.post<CommonResponseType>(`dialogs/messages/${messageId}/spam`)\r\n            .then(res => res.data);\r\n    },\r\n};","import {ResultCodesEnum} from \"../api/api\";\r\nimport {DeletedDialogMessageType, DialogMessage, DialogType} from \"../types/types\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {ActionsTypes, AppStateType} from \"./redux-store\";\r\nimport {dialogsAPI} from \"../api/dialogs-api\";\r\n\r\n\r\n\r\nlet initialState = {\r\n    dialogs: [] as Array<DialogType>,\r\n    messages: [] as Array<DialogMessage>,\r\n    selectedDialogId: null as string | null,\r\n    newMessagesCount: 0,\r\n    needRefresh: false,\r\n    currentDialogMessagesCount: 0,\r\n    deletedMessages: [] as Array<DeletedDialogMessageType>,\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action: DialogReducerActionsTypes): DialogsInitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case 'GET_DIALOGS_SUCCESS':\r\n        case 'SET_CURRENT_DIALOG':\r\n        case 'GET_MESSAGES_SUCCESS':\r\n        case 'SET_NEW_MESSAGES_COUNT':\r\n        case 'SET_NEED_REFRESH':\r\n            // @ts-ignore\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            };\r\n        case 'PUT_UP_DIALOG':\r\n            const dialog = state.dialogs.find((d: DialogType) => d.id == action.userId);\r\n            if (dialog) {\r\n                return {\r\n                    ...state,\r\n                    dialogs: [dialog, ...state.dialogs.filter(d => d.id != action.userId)]\r\n                };\r\n            } else {\r\n                return state;\r\n            }\r\n        case 'DELETE_MESSAGE_FOR_OWNER':\r\n            return {\r\n                ...state,\r\n                messages: state.messages.filter(m => m.id !== action.messageId)\r\n            };\r\n        case 'SET_HAS_NEW_MESSAGES':\r\n            return {\r\n                ...state,\r\n                dialogs: state.dialogs.map(d => {\r\n                    // @ts-ignore\r\n                    if (d.id == action.userId) return {...d, hasNewMessages: action.hasNewMessages};\r\n                    else return d\r\n                })\r\n\r\n            };\r\n        case 'APPEND_MESSAGES':\r\n            return {\r\n                ...state, messages: [...state.messages, ...action.messages]\r\n            };\r\n        case 'ADD_DELETED_MESSAGES':\r\n            return {\r\n                ...state, deletedMessages: [...state.deletedMessages, action.message]\r\n            };\r\n        case 'RESTORE_MESSAGE':\r\n            return {\r\n                ...state, deletedMessages: state.deletedMessages.filter(m => m.id !== action.messageId)\r\n            };\r\n        case 'ADD_TO_SPAM_SUCCESS':\r\n            return {\r\n                ...state, messages: state.messages.filter(m => m.id !== action.messageId)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nexport const getDialogs = (): ThunkWithPromiseType => async (dispatch) => {\r\n    let dialogs = await dialogsAPI.getDialogs();\r\n    dispatch(dialogsReducerActionCreators.getDialogsSuccess(dialogs));\r\n};\r\n\r\nexport const sendMessage = (userId: number, body: string): ThunkWithPromiseType => async (dispatch) => {\r\n     await dialogsAPI.sendMessage(userId, body);\r\n    dispatch(dialogsReducerActionCreators.setNeedRefresh(true));\r\n    dispatch(dialogsReducerActionCreators.putUpDialog(userId));\r\n};\r\nexport const startDialog = (userId: number) => async (dispatch: any, getState: any) => {\r\n    await dialogsAPI.startDialog(userId);\r\n    let dialog = getState().dialogsPage.dialogs.find((d: any) => d.id == userId);\r\n    if (dialog) {\r\n        dispatch((dialogsReducerActionCreators.putUpDialog(userId)));\r\n    } else {\r\n        dispatch(getDialogs())\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\nexport const getMessages = (userId: number, needRefresh = false): ThunkWithPromiseType => async (dispatch, getState) => {\r\n    let state = getState();\r\n    let messages = state.dialogsPage.messages;\r\n    if (messages.length > 0 && messages[messages.length - 1].viewed && !needRefresh) {\r\n        /*  dispatch(updateUnviewedMessages())*/\r\n        dispatch(getMessagesNewerThenLast(userId, messages[messages.length - 1].addedAt))\r\n    } else {\r\n        let result = await dialogsAPI.getMessages(userId);\r\n\r\n        if (result.messages.some((m: DialogMessage) => !m.viewed)) dispatch(dialogsReducerActionCreators.setNeedRefresh(true));\r\n        dispatch(dialogsReducerActionCreators.getMessagesSuccess(result.messages, result.totalCount));\r\n        dispatch(dialogsReducerActionCreators.setHasNewMessages(userId, false));\r\n    }\r\n};\r\n\r\nexport const init = (userId: number): ThunkWithPromiseType => async (dispatch) => {\r\n    if (!!userId) {\r\n        dispatch(getMessages(userId));\r\n        dispatch(dialogsReducerActionCreators.setCurrentDialog(userId));\r\n        await dispatch(startDialog(userId));\r\n        dispatch(getDialogs())\r\n\r\n    } else {\r\n        dispatch(getDialogs());\r\n    }\r\n};\r\n\r\nexport const updateDialog = (userId: number): ThunkType => (dispatch) => {\r\n    if (!!userId) {\r\n        dispatch(dialogsReducerActionCreators.setNeedRefresh(true));\r\n        dispatch(getMessages(userId, true));\r\n        dispatch(dialogsReducerActionCreators.setCurrentDialog(userId))\r\n    } else {\r\n        dispatch(dialogsReducerActionCreators.setCurrentDialog(null));\r\n    }\r\n};\r\nexport const getNewMessages = (): ThunkWithPromiseType => async (dispatch, getState) => {\r\n    let count = await dialogsAPI.getNewMessagesCount();\r\n    let state = getState();\r\n    if (state.dialogsPage.newMessagesCount !== count || state.dialogsPage.needRefresh) {\r\n        dispatch(dialogsReducerActionCreators.setNewMessagesCount(count));\r\n        dispatch(getDialogs());\r\n        dispatch(dialogsReducerActionCreators.setNeedRefresh(false));\r\n        if (state.dialogsPage.selectedDialogId !== null) {\r\n            dispatch(getMessages(Number(state.dialogsPage.selectedDialogId)));\r\n        }\r\n    }\r\n};\r\n\r\nexport const deleteMessageForOwner = (messageId: string): ThunkWithPromiseType => async (dispatch, getState) => {\r\n    let res = await dialogsAPI.deleteMessageForOwner(messageId);\r\n    if (res.resultCode === ResultCodesEnum.Success) {\r\n        const restoredInterval = <any>setTimeout(() => {\r\n            dispatch(dialogsReducerActionCreators.deleteMessageForOwnerSuccess(messageId));\r\n        }, 5000);\r\n        dispatch(dialogsReducerActionCreators.addDeletedMessages(messageId, restoredInterval));\r\n    }\r\n};\r\n\r\nexport const getMessagesNewerThenLast = (userId: number, date: string): ThunkWithPromiseType => async (dispatch, getState) => {\r\n    let messages = await dialogsAPI.getMessagesNewerThenLast(userId, date);\r\n    dispatch(dialogsReducerActionCreators.appendMessages(messages));\r\n};\r\nexport const restoreMessage = (messageId: string): ThunkWithPromiseType => async (dispatch, getState) => {\r\n    let res = await dialogsAPI.restoreMessage(messageId);\r\n    if (res.resultCode ===  ResultCodesEnum.Success) {\r\n        const deletedMessages = getState().dialogsPage.deletedMessages;\r\n        const interval = deletedMessages.find((m: any) => m.id === messageId);\r\n        if(interval) clearInterval(interval.restoredInterval);\r\n        dispatch(dialogsReducerActionCreators.restoreMessageSuccess(messageId));\r\n    }\r\n};\r\nexport const addMessageToSpam = (messageId: string): ThunkWithPromiseType => async (dispatch, getState) => {\r\n    let res = await dialogsAPI.addToSpam(messageId);\r\n    if (res.resultCode ===  ResultCodesEnum.Success) {\r\n        dispatch(dialogsReducerActionCreators.addToSpamSuccess(messageId));\r\n    }\r\n};\r\n\r\n\r\nexport default dialogsReducer;\r\n\r\n\r\n\r\ntype ThunkWithPromiseType = ThunkAction<Promise<void>, AppStateType, unknown, DialogReducerActionsTypes>;\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, DialogReducerActionsTypes>;\r\n\r\nexport const dialogsReducerActionCreators = {\r\n    setCurrentDialog: (selectedDialogId: number | null) => (\r\n        {\r\n            type: 'SET_CURRENT_DIALOG',\r\n            payload: {\r\n                selectedDialogId\r\n            }\r\n        } as const\r\n    ),\r\n    getMessagesSuccess: (messages: Array<DialogMessage>, currentDialogMessagesCount: number) => (\r\n        {\r\n            type: 'GET_MESSAGES_SUCCESS',\r\n            payload:\r\n                {\r\n                    messages,\r\n                    currentDialogMessagesCount\r\n                }\r\n        } as const\r\n    ),\r\n    putUpDialog: (userId: number) => (\r\n        {\r\n            type: 'PUT_UP_DIALOG',\r\n            userId\r\n        } as const\r\n    ),\r\n    setHasNewMessages: (userId: number, hasNewMessages: boolean) => (\r\n        {\r\n            type: 'SET_HAS_NEW_MESSAGES',\r\n            userId,\r\n            hasNewMessages,\r\n        } as const\r\n    ),\r\n    appendMessages: (messages: Array<DialogMessage>) => (\r\n        {\r\n            type: 'APPEND_MESSAGES',\r\n            messages\r\n        } as const\r\n    ),\r\n    addDeletedMessages: (messageId: string, restoredInterval: number) => (\r\n        {\r\n            type: 'ADD_DELETED_MESSAGES',\r\n            message:\r\n                {id: messageId, restoredInterval}\r\n        } as const\r\n    ),\r\n    restoreMessageSuccess: (messageId: string) => (\r\n        {\r\n            type: 'RESTORE_MESSAGE',\r\n            messageId\r\n        } as const\r\n    ),\r\n    deleteMessageForOwnerSuccess: (messageId: string) => (\r\n        {\r\n            type: 'DELETE_MESSAGE_FOR_OWNER',\r\n            messageId\r\n        } as const\r\n    ),\r\n    addToSpamSuccess: (messageId: string) => (\r\n        {\r\n            type: 'ADD_TO_SPAM_SUCCESS',\r\n            messageId\r\n        } as const\r\n    ),\r\n    getDialogsSuccess: (dialogs: Array<DialogType>) => (\r\n        {\r\n            type: 'GET_DIALOGS_SUCCESS',\r\n            payload: {\r\n                dialogs\r\n            }\r\n        } as const\r\n    ),\r\n    setNewMessagesCount: (newMessagesCount: number) => (\r\n        {\r\n            type: 'SET_NEW_MESSAGES_COUNT',\r\n            payload: {\r\n                newMessagesCount\r\n            }\r\n        }  as const\r\n    ),\r\n    setNeedRefresh: (needRefresh: boolean) => (\r\n        {\r\n            type: 'SET_NEED_REFRESH',\r\n            payload:\r\n                {\r\n                    needRefresh\r\n                }\r\n        }  as const\r\n    ) ,\r\n}\r\n\r\ntype DialogReducerActionsTypes = ActionsTypes<typeof dialogsReducerActionCreators>;\r\nexport type DialogsInitialStateType = typeof initialState;\r\n","import React from 'react';\r\nimport s from './Buttons.module.css'\r\nimport cn from 'classnames'\r\n\r\ntype CommonButtonsPropsType = {\r\n    callback?: (e?: any) => void\r\n    name: string\r\n}\r\n\r\nexport const BigButton: React.FC<CommonButtonsPropsType> = (props) => {\r\n    return <button onClick={props.callback} className={s.button}>{props.name}</button>\r\n};\r\n\r\ntype SmallButtonPropsType = {\r\n    disabled?: boolean\r\n    className?: string\r\n    callback?: () => void\r\n    name: string\r\n}\r\n\r\nexport const SmallButton: React.FC<SmallButtonPropsType> = (props) => {\r\n    return <button onClick={props.callback} disabled={props.disabled}\r\n                   className={cn(s.smallButton, {[s.disabled]: props.disabled}, props.className)}>{props.name}</button>\r\n};\r\n\r\ntype PagesButtonPropsType = {\r\n    isVisible: boolean\r\n}\r\n\r\nexport const PagesButton: React.FC<CommonButtonsPropsType & PagesButtonPropsType> = (props) => {\r\n    return <button onClick={props.callback}\r\n                   className={cn(s.pagesButton, {[s.notVisible]: !props.isVisible})}>{props.name}</button>\r\n};\r\n\r\n\r\nexport const AddFileButton: React.FC<CommonButtonsPropsType> = (props) => {\r\n    return <div className={s.addFileButton}>\r\n        <label htmlFor=\"input\">{props.name}</label>\r\n        <input onChange={props.callback} type=\"file\" id=\"input\"/>\r\n    </div>\r\n};\r\n\r\n","import React from 'react';\r\nimport preloader from '../../assets/images/preloader.svg'\r\n\r\nconst Preloader: React.FC = () =>{\r\n    return <div>\r\n        <img src={preloader} alt=\"\" />\r\n    </div>\r\n};\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2l48h\",\"loginBlock\":\"Header_loginBlock__iN0xv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"NotFound_img__FbMbo\",\"container\":\"NotFound_container__1C2hQ\"};","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, ResponseType} from \"./api\";\r\n\r\ntype savePhotoResponseDataType = {\r\n        photos: PhotosType\r\n};\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/${userId}`)\r\n            .then(response => response.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`)\r\n            .then(response => {\r\n                /* debugger;*/\r\n                return response.data\r\n            });\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<ResponseType>('/profile/status', {status}).then(response => response.data);\r\n    },\r\n    savePhoto(photoFile: any) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n\r\n        return instance.put<ResponseType<savePhotoResponseDataType>>('/profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(response => response.data);\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<ResponseType>('/profile', profile).then(res => res.data)\r\n    }\r\n\r\n};","import {ResultCodesEnum} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {ActionsTypes, AppStateType, BaseThunkType} from \"./redux-store\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\n\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        {\r\n            id: 0,\r\n            message: 'Hi, how are you',\r\n            likesCount: 5,\r\n            img: \"https://yt3.ggpht.com/a/AGF-l78XZgyutXUlON-U4sTy-EwaZoBJXrqGvQ2kxg=s900-c-k-c0xffffffff-no-rj-mo\"\r\n        },\r\n        {\r\n            id: 1,\r\n            message: 'It\\'s my first post',\r\n            likesCount: 20,\r\n            img: \"https://yt3.ggpht.com/a/AGF-l78XZgyutXUlON-U4sTy-EwaZoBJXrqGvQ2kxg=s900-c-k-c0xffffffff-no-rj-mo\"\r\n        }\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n    newPostText: ''\r\n};\r\n\r\n\r\nconst profileReducer = (state = initialState, action: ProfileReducerActionsTypes): ProfileReducerInitialStateType => {\r\n    switch (action.type) {\r\n        case 'ADD_POST':\r\n            let newPost = {\r\n                id: state.postsData.length,\r\n                message: action.newPostText,\r\n                likesCount: 0,\r\n                img: \"https://yt3.ggpht.com/a/AGF-l78XZgyutXUlON-U4sTy-EwaZoBJXrqGvQ2kxg=s900-c-k-c0xffffffff-no-rj-mo\"\r\n            };\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, newPost],\r\n                newPostText: ''\r\n            };\r\n        case 'SET_USER_PROFILE':\r\n            return {\r\n                ...state, profile: action.profile\r\n            };\r\n        case 'SET_STATUS':\r\n            return {\r\n                ...state, status: action.status\r\n            };\r\n        case 'DELETE_POST':\r\n            return {\r\n                ...state, postsData: state.postsData.filter(post => post.id.toString() !== action.postId)\r\n            };\r\n        case 'SAVE_PHOTO_SUCCESS':\r\n            return {\r\n                ...state, profile: {...state.profile, photos: action.photos} as ProfileType\r\n            };\r\n        case 'UPDATE_POST':\r\n            return {\r\n                ...state, postsData: state.postsData.map(p => {\r\n                    if (p.id.toString() === action.postId) return {...p, message: action.message};\r\n                    else return p;\r\n                })\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId);\r\n    dispatch(profileReducerActionCreators.setUserProfile(data));\r\n};\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let status = await profileAPI.getStatus(userId);\r\n    dispatch(profileReducerActionCreators.setStatus(status))\r\n\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let response = await profileAPI.updateStatus(status);\r\n    if (response.resultCode === ResultCodesEnum.Success) dispatch(profileReducerActionCreators.setStatus(status))\r\n};\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let response = await profileAPI.savePhoto(file);\r\n    if (response.resultCode === ResultCodesEnum.Success) dispatch(profileReducerActionCreators\r\n        .sevePhotoSuccess(response.data.photos))\r\n};\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId;\r\n    let data = await profileAPI.saveProfile(profile);\r\n    /*  debugger;*/\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        if (userId !== null) {\r\n            dispatch(getUserProfile(userId));\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    }  else {\r\n            let message: string | string[] = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n            if (message !== \"Some error\") {\r\n                message = message.split(\"->\");\r\n                message = message[1].toLocaleLowerCase();\r\n                message = message.slice(0, message.length - 1);\r\n                dispatch(stopSubmit(\"profile-data\", {\r\n                        \"contacts\": {[message]: data.messages[0]}\r\n                    })\r\n                );\r\n            } else {\r\n                dispatch(stopSubmit(\"profile-data\", {_error: message}));\r\n            }\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n\r\n};\r\n\r\nexport default profileReducer;\r\n\r\nexport const profileReducerActionCreators = {\r\n    addPost: (newPostText: string) => ({type: 'ADD_POST', newPostText} as const),\r\n    deletePost: (postId: string | number) => ({type: 'DELETE_POST', postId} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'SET_USER_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'SET_STATUS', status} as const),\r\n    sevePhotoSuccess: (photos: PhotosType) => ({type: 'SAVE_PHOTO_SUCCESS', photos} as const),\r\n    updatePost: (postId: number | string, message: string) =>\r\n        ({type: 'UPDATE_POST', postId, message} as const),\r\n};\r\n\r\ntype ProfileReducerActionsTypes = ActionsTypes<typeof profileReducerActionCreators>\r\ntype ThunkType = BaseThunkType<ProfileReducerActionsTypes | FormAction>;\r\nexport type ProfileReducerInitialStateType = typeof initialState\r\n\r\n","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProp: any) =>{\r\n    return items.map((i: any) => {\r\n        if(i[objPropName] === itemId) return {...i, ...newObjProp};\r\n        return i;\r\n    });\r\n};","import {UserType} from \"../types/types\";\r\nimport {instance, ResponseType} from \"./api\";\r\n\r\ntype GetUsersResponseType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n};\r\nexport const userAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<GetUsersResponseType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<ResponseType>(`follow/${userId}`)\r\n            .then(response => response.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<ResponseType>(`follow/${userId}`).then(response => response.data)\r\n    },\r\n};","import {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {UserType} from \"../types/types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ActionsTypes, BaseThunkType} from \"./redux-store\";\r\nimport {userAPI} from \"../api/users-api\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>, //array of urers ids\r\n};\r\n\r\nexport type UsersReducerInitStateType = typeof initialState;\r\n\r\nconst usersReducer = (state = initialState, action: UsersReducerActionsTypes): UsersReducerInitStateType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            };\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            };\r\n        case 'SN/USERS/SET_USERS':\r\n            return {...state, users: [...action.users]};\r\n\r\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT':\r\n            return {...state, totalUsersCount: action.totalUsersCount};\r\n\r\n        case 'SN/USERS/SET_CURRENT_PAGE':\r\n            return {...state, currentPage: action.currentPage};\r\n\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n\r\n        case 'SN/USERS/TOGGLE_FOLLOWING_IN_PROGRESS': {\r\n            return {\r\n                ...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId] : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\nexport default usersReducer;\r\n\r\ntype UsersReducerActionsTypes = ActionsTypes<typeof usersReducerActionCreators>\r\n\r\ntype DispatchType = Dispatch<UsersReducerActionsTypes>\r\ntype ThunkType = BaseThunkType<UsersReducerActionsTypes>;\r\n\r\nexport const requestUsers = (page: number, pageSize: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(usersReducerActionCreators.toggleIsFetching(true));\r\n\r\n        let data = await userAPI.getUsers(page, pageSize);\r\n        dispatch(usersReducerActionCreators.toggleIsFetching(false));\r\n        dispatch(usersReducerActionCreators.setUsers(data.items));\r\n        dispatch(usersReducerActionCreators.setCurrentPage(page));\r\n        dispatch(usersReducerActionCreators.setTotalUsersCount(data.totalCount));\r\n    }\r\n};\r\n\r\nconst _followUnfollowFlow = async (\r\n    dispatch: DispatchType,\r\n    userId: number,\r\n    apiMethod: any,\r\n    actionCreator: (userId: number) => any\r\n) => {\r\n    dispatch(usersReducerActionCreators.toggleFollowingInProgress(true, userId));\r\n    let data = await apiMethod(userId);\r\n    if (data.resultCode === 0) dispatch(actionCreator(userId));\r\n    dispatch(usersReducerActionCreators.toggleFollowingInProgress(false, userId));\r\n};\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n      await  _followUnfollowFlow(dispatch, userId, userAPI.follow.bind(userAPI), usersReducerActionCreators.followSuccess);\r\n    }\r\n};\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n      await  _followUnfollowFlow(dispatch, userId, userAPI.unfollow.bind(userAPI), usersReducerActionCreators.unfollowSuccess);\r\n    }\r\n};\r\n\r\n\r\nexport const usersReducerActionCreators = {\r\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({type: 'SN/USERS/SET_TOTAL_USERS_COUNT', totalUsersCount} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: 'SN/USERS/TOGGLE_IS_FETCHING', isFetching} as const),\r\n    toggleFollowingInProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'SN/USERS/TOGGLE_FOLLOWING_IN_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n};","module.exports = __webpack_public_path__ + \"static/media/preloader.ade7b44c.svg\";","module.exports = __webpack_public_path__ + \"static/media/logoSite.32fdec1a.png\";","module.exports = __webpack_public_path__ + \"static/media/404NotFound.1b28b096.jpg\";","module.exports = __webpack_public_path__ + \"static/media/oopsPhoto.23d24fde.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ErrorBoundary_container__2g3n_\"};"],"sourceRoot":""}